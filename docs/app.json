[{"name": "app.py", "content": "# Python modules\nfrom shiny import App\nfrom pathlib import Path\n\n# From local files\nfrom app_server import server\nfrom app_ui import app_ui\n\n# Static assets directory containing .js and .css files\nwww_dir = Path(__file__).parent / \"www\"\n\n# Create the application\napp = App(app_ui, server, static_assets=www_dir)\n\n", "type": "text"}, {"name": "app_data_processing.py", "content": "# Python modules\nfrom pathlib import Path\nimport pandas as pd\nimport pyodide.http\nfrom io import StringIO\nimport bqplot.pyplot as plt\n\n# From local files\nfrom app_variables import diagnoses_categories_map, diagnoses_categories_map_aggregates, data_url\nfrom app_plotting import create_plot, empty_plot_with_title\n\n# Global variable store of raw data\ndata_df_cached = None\n\n# Fetch csv data from url and avoids additional http requests if cached data exists from previous call to function\nasync def get_web_data_async(url):\n    global data_df_cached\n\n    if data_df_cached is None:\n        try:\n            response = await pyodide.http.pyfetch(url)\n            if response.ok:\n                data = await response.string()\n                data_df = pd.read_csv(StringIO(data))\n                data_df_cached = data_df.copy() # Cache data as global variable\n                return data_df\n            else:\n                raise Exception(f\"Fetch Error with STATUS {response.status}. {response.status_text}\")\n        except:\n            raise\n    else:\n        return data_df_cached\n    \n# Impute missing values with median of the entire column metric\ndef impute_median(df):\n    from sklearn.impute import SimpleImputer\n    \n    imputer = SimpleImputer(strategy = \"median\")                 \n\n    # Impute the remain small numbers (~25) of missing values using median of each column\n    df_imputed = pd.DataFrame(imputer.fit_transform(df.iloc[:,1:]), # Without country column\n                              columns = df.columns[1:])\n    \n    countries = df[['country']].reset_index(drop=True)\n    \n    df_imputed = pd.concat([countries,df_imputed], axis=1)\n    \n    X_train=df_imputed.drop('country',axis=1)\n    \n    return countries, X_train\n\n# Get selected column names using diagnoses_categories_map_aggregates from app_variables.py\ndef get_columns_from_categories(categories, include_category_summary):\n    columns_selected = []\n    \n    for category in categories:\n        if include_category_summary:\n            # Adds the category summary column\n            summary_name = diagnoses_categories_map_aggregates.get(category)\n            \n            if summary_name:\n                columns_selected.append(summary_name)\n            \n        columns_selected += diagnoses_categories_map[category] # extends the list\n        \n    return columns_selected\n\n# Performs data processing steps to create a dataframe for training model\ndef data_processing(df, categories=list(diagnoses_categories_map.keys()), scaling = True, \n                    include_category_summary=False):\n    \n    df_temp = df.copy()\n\n    # Get selected columns using category to columns map\n    columns_selected = get_columns_from_categories(categories, include_category_summary)\n    \n    # Fills missing values in-place for each country with the latest (by year) value using .ffil()\n    df_temp.update(df.groupby(\"country\").ffill())\n\n    # Takes the latest value by using the year 2021, and filters for only the diagnoses columns\n    latest_diagnoses = df_temp[df_temp['year']==2021][[\"country\"]+columns_selected]\n    \n    # Drop countries with many metrics missing - list derived from Pandas exploration not shown here\n    to_drop_countries = [\"United Kingdom\",\"China (People's Republic of)\",\"Estonia\",\"India\",\n                         \"Indonesia\",\"Russia\",\"South Africa\",\"Brazil\",\"Colombia\"]\n    latest_diagnoses_dropped = latest_diagnoses[-latest_diagnoses['country'].isin(to_drop_countries)]\n\n    # Impute median for remaining missing values and create training dataframe\n    countries, X_train = impute_median(latest_diagnoses_dropped)\n\n    # Normalisation and scaling only required for Machine learning\n    if scaling:\n        from sklearn.preprocessing import StandardScaler\n        scaler = StandardScaler()\n        X_train = pd.DataFrame(scaler.fit_transform(X_train), columns = X_train.columns)\n\n    return countries, X_train\n\n# Loads data and performs data processing and modelling to return a data required for plotting\nasync def train_and_get_plot(categories = [], num_groups = 3, on_select_callback = None):\n    url = data_url\n    \n    # Load data from url\n    # Asynchronous because may not be successful if http request fails e.g. timeout. \n    # Returns an empty figure if fails to fetch data rather than crashing the app\n    try:\n        oecd_df = await get_web_data_async(url)\n    except Exception as e:\n        print(e)\n        return plt.figure(figsize=(6, 4), title = \"Error getting data from URL\")\n\n    # Data Processing\n    countries, training_data = data_processing(oecd_df, categories, scaling=True)\n\n    # Create bqplot figure object\n    fig = create_plot(training_data, countries, num_groups, on_select = on_select_callback)\n\n    return fig\n\n# Retrains and updates figure in-place\ndef train_and_update_plot(fig, categories = [], num_groups = 3, selected_countries=[]):\n    global data_df_cached # Function should only be called after successful initial plot with data, so get data from cache\n\n    # If data not available, don't do anything to the figure (should be displaying error message)\n    if data_df_cached is None:\n        return \n\n    # If no cateogires selected - empty the plot and show feedback as the plot title\n    if len(categories)==0:\n        empty_plot_with_title(title=\"Please Select At Least One Category...\", fig=fig)\n        return\n\n    oecd_df = data_df_cached.copy()\n\n    # Reprocess the data on selected categories\n    countries, training_data = data_processing(oecd_df, categories, scaling=True)\n\n    # Use create_plot again but pass the figure object and set param update_plot to True. This modifies the fig in-place\n    create_plot(training_data, countries, num_groups, fig, selected_countries=selected_countries, update_plot=True)", "type": "text"}, {"name": "app_info_text.py", "content": "info_html = \"\\\n<h6> How the Dashboard works </h6>\\\n<p>\\\nThis dashboard application allows visualisation of a subset of OECD member countries based on \\\nhow similar or dissimilar they are in terms of diagnoses made on hospital discharge (based on numbers of diagnoses per 100,000 population or female population). \\\nThere are 20 categories of diagnoses available to be filtered. In addition, the number of clusters to group the countries \\\nmay be adjusted. These processes of reducing the dataset into two axes to allow visualisation, and the learning of groups/clusters are \\\nboth unsupervised Machine Learning algorithms.\\\n</p>\\\n<p>\\\nTo view the underlying numerical data and to compare between countries, simply click on the datapoint or country in the plot. \\\nThis will create a table with the selected countries and diagnostic categories. To collapse or show the sub-categories - \\\nclick on the main category row.\\\n</p>\\\n<hr/>\\\n<h6> Methodology </h6>\\\n<p>\\\nThis dashboard uses the OECD Health Care Utilisation dataset and the latest discharge diagnosis numbers for each country. \\\nAfter removing countries with unavailable data for discharge diagnoses, 26 countries remained which were mostly OECD member countries. \\\nThere were over 100 numerical columns of different diagnoses. Depending on user selection of categories to show, these numerical columns were \\\nnormalised and processed into two dimensions to allow plotting. This was performed using Spectral Embedding, an unsupervised machine learning process. \\\nFollowing this, the countries were clustered/ grouped depending on the two reduced dimensions using another unsupervised machine learning process called Agglomerative Clustering. \\\nThese data processing and learning steps are dynamic and respond reactively to changes in user input.\\\n</p>\\\n\"", "type": "text"}, {"name": "app_plotting.py", "content": "# Python modules\nfrom sklearn.manifold import SpectralEmbedding\nfrom sklearn.cluster import AgglomerativeClustering\nimport bqplot.pyplot as plt\nfrom bqplot import Tooltip\n\n# Integer group to color mapping\ncolors_map = {\n    0:'#669900', # green\n    1:'#cb0b0a', # red\n    2:'#6ab6dc', # blue\n    3:'#9b9c9b', # grey\n    4:'#ff9900', # yellow\n    5:'#cc3399', # pink\n    6:'#3a0ca3', # purple\n}\n\n# Figure Default Styling\nanimation_speed = 2000 #ms\n\n# Main plotting function that can either create a new figure or update one (using the \"fig\" and \"update_plot\" parameters)\ndef create_plot(X_train, countries, num_groups, fig = None, update_plot=False, selected_countries = [], on_select = None):\n\n    global animation_speed\n    \n    # Create reduced dimensions for 2D plotting\n    X_reduced = SpectralEmbedding(n_components=2, #2 axes\n                                   n_neighbors=12,\n                                   affinity = \"nearest_neighbors\",\n                                   random_state=42)\\\n                                   .fit_transform(X_train)\n\n    # Clustering to generate interger labels\n    clustering = AgglomerativeClustering(linkage=\"average\", n_clusters=num_groups)\n    clustering.fit(X_reduced)\n\n    # Get label colors\n    labels_to_color = [colors_map[label] for label in clustering.labels_]\n\n    # Get axis coordinates\n    x_axis = X_reduced[:, 0]\n    y_axis = X_reduced[:, 1]\n\n    # Create new figure if update_plot is False\n    if update_plot==False:\n        fig= plt.figure(figsize=(6, 6),animation_duration=animation_speed)\n\n        # Tooltip - hover for name\n        tooltip = Tooltip(fields=[\"name\"], formats=[\"\"])\n\n        # Axes\n        axes_options = {\n            \"x\":{\"label\":\"Reduced Dimension X\",\"tick_style\":{\"display\":\"none\"}},\n            \"y\":{\"label\":\"Reduced Dimension Y\",\"tick_style\":{\"display\":\"none\"}}\n        }\n\n        # Scatterplot\n        scatterplot = plt.scatter(x_axis, y_axis, \n                    colors=labels_to_color,\n                    names=countries,\n                    display_names=True,\n                    apply_clip=False,\n                    tooltip=tooltip,\n                    axes_options=axes_options\n                    )\n\n        # Register click callback that updates Reactive value in the server\n        scatterplot.on_element_click(on_select)\n\n        # Scatterplot - only showing the stroke as a ring highliting selected points\n        highlights = plt.scatter(\n            x =[],\n            y=[],\n            default_size=200,\n            fill=False,\n            stroke=\"black\",\n            axes_options=axes_options\n        )\n        \n        return fig\n\n    # Update the plot in-place if update_plot is True\n    else:\n        if not fig:\n            return # Do nothing if no figure object passed\n            \n        # Figure object passed as fig and the plt.scatter object within \"marks\" attribute. \n        scatterplot = fig.marks[0]\n        highlights = fig.marks[1]\n        \n        num_points = len(scatterplot.x)\n\n        # Update plot within context manager hold_sync() for simultaneous updating\n        with fig.hold_sync():\n            # New coordinates after reprocessing and retraining the data\n            scatterplot.x = x_axis\n            scatterplot.y = y_axis\n            \n            # New cluster labels and colors\n            scatterplot.colors=labels_to_color\n            \n            # Reset styling\n            fig.title=\"\"\n            scatterplot.opacities = [1]*num_points\n            highlights.opacities = [1]*num_points\n            scatterplot.display_names = True\n            \n            # Update highlight circle positions\n            plot_highlight_circle(fig, selected_countries)\n\n# Plots a highlight circle around selected country\ndef plot_highlight_circle(fig, selected_countries=[]):\n    global animation_speed\n\n    # Figure object passed as fig and the plt.scatter object within \"marks\" attribute. \n    scatterplot = fig.marks[0]\n    highlights = fig.marks[1]\n\n    # Index positions in the scatterplot of selected countries\n    indexes = [index for index in range(len(scatterplot.x)) \n               if scatterplot.names[index] in selected_countries]\n\n    # Build updated positions\n    x_positions, y_positions = [],[]\n    for index in indexes:\n        x_positions.append(scatterplot.x[index])\n        y_positions.append(scatterplot.y[index])\n\n    # Update the plot in-place, within context manager hold_sync() for simultaneous updating.\n    # No animation when updating highlights on/off\n    fig.animation_duration=0\n    \n    with fig.hold_sync():\n        highlights.x=x_positions\n        highlights.y=y_positions\n        \n    fig.animation_duration=animation_speed\n\n# Toggles display of labels on/off\ndef toggle_plot_labels(fig):\n    scatterplot = fig.marks[0]\n\n    scatterplot.display_names = not scatterplot.display_names\n    \n        \n# Changes a figure in-place to empty plot, and display an error message as the plot title\ndef empty_plot_with_title(title=\"Something Went Wrong :(\", fig = None):\n    if not fig:\n        return\n\n    global animation_speed\n        \n    scatterplot = fig.marks[0]\n    highlights = fig.marks[1]\n\n    num_points = len(scatterplot.x)\n\n    # Update the plot in-place, within context manager hold_sync() for simultaneous updating\n    # Do not animate the changes\n    fig.animation_duration=0\n    \n    with fig.hold_sync():\n        fig.title=title\n        scatterplot.opacities = [0]*num_points # Hide current points\n        highlights.opacities = [0]*num_points # Hide current highlights\n        scatterplot.display_names = False\n\n    fig.animation_duration=animation_speed    ", "type": "text"}, {"name": "app_server.py", "content": "# Python modules\nfrom shiny import render, reactive, ui\nfrom shinywidgets import register_widget, reactive_read\nimport bqplot.pyplot as plt\n\n# From local files\nfrom app_data_processing import train_and_get_plot, train_and_update_plot\nfrom app_table_generation import create_table\nfrom app_plotting import plot_highlight_circle, toggle_plot_labels\nfrom app_ui import left_categories, right_categories\nfrom app_info_text import info_html\n\ndef server(input, output, session):\n    # Variable store of figure object - allows updating in place (more efficient and allows animation) rather than re-rendering the plot\n    fig_object = None\n    selected_countries = reactive.Value([])\n    country_to_color = reactive.Value({})\n    \n    # Selects and removes countries when clicking on the plot\n    def on_select_callback(*args):\n        clicked_name = args[1].get(\"data\").get(\"name\")\n        selected_copy = selected_countries.get()[:]\n\n        # Add or remove the clicked country from selected countries\n        if clicked_name in selected_copy:\n            selected_copy.remove(clicked_name)\n        else:\n            selected_copy.append(clicked_name)\n            \n        selected_countries.set(selected_copy)\n    \n    @reactive.Effect\n    @reactive.event(input.diagnosis_categories_left, input.diagnosis_categories_right, input.num_groups)\n    # Creates the plot if does not exist, otherwise updates it in-place in response to changes in selection by user\n    async def create_and_update_plot():\n        nonlocal fig_object\n        \n        # Reactive inputs\n        categories_selected = input.diagnosis_categories_left() + input.diagnosis_categories_right()\n        num_groups = input.num_groups()\n\n        # Creates fig object - await because on first call it will fetch the raw data using http request\n        if fig_object is None:\n            fig = await train_and_get_plot(categories = categories_selected, num_groups = num_groups, on_select_callback = on_select_callback)\n            # Register figure to be shown and store figure in variable for in-place modification\n            register_widget(\"plot_output\", fig)\n            fig_object = fig \n        else:\n            # Use stored figure object to update plot in-place\n            train_and_update_plot(fig_object, categories = categories_selected, selected_countries=selected_countries.get(), num_groups = num_groups)\n\n        # Retrieve the color mapping from fig and update country_to_color\n        colors_list = fig_object.marks[0].colors\n        countries = fig_object.marks[0].names\n        country_to_color.set(dict(zip(countries,colors_list)))\n\n    @reactive.Effect\n    @reactive.event(selected_countries)\n    # Toggles the highlight circle on/off for selected countries\n    def update_plot_selections():\n        nonlocal fig_object\n        selected = selected_countries.get()\n\n        plot_highlight_circle(fig_object, selected_countries=selected)\n\n    @reactive.Effect\n    @reactive.event(input.select_all_button)\n    def select_all_checkboxes():\n        ui.update_checkbox_group(\"diagnosis_categories_left\", selected = left_categories)\n        ui.update_checkbox_group(\"diagnosis_categories_right\", selected = right_categories)\n\n    @reactive.Effect\n    @reactive.event(input.select_none_button)\n    def select_no_checkboxes():\n        ui.update_checkbox_group(\"diagnosis_categories_left\", selected = [])\n        ui.update_checkbox_group(\"diagnosis_categories_right\", selected = [])\n\n    @reactive.Effect\n    @reactive.event(input.open_categories_button, input.close_categories_button)\n    def toggle_show_categories():\n        ui.update_switch(\"show_categories\", value= not input.show_categories())\n\n    @reactive.Effect\n    @reactive.event(input.toggle_labels_button)\n    def toggle_labels():\n        toggle_plot_labels(fig_object)\n\n    @reactive.Effect\n    @reactive.event(input.clear_country_selection_button)\n    def clear_country_selection():\n        selected_countries.set([])     \n\n    @output\n    @render.table(index=True)\n    @reactive.event(input.diagnosis_categories_left,input.diagnosis_categories_right,selected_countries,country_to_color)\n    def table_output():\n        # Reactive inputs\n        categories_selected = input.diagnosis_categories_left() + input.diagnosis_categories_right()\n        countries = selected_countries.get()\n        rows_hidden_state = input.row_indexes_to_hide()\n\n        # Table is a Styler object from pandas\n        table = create_table(categories = categories_selected, \n                             countries_selected = countries, \n                             country_to_color = country_to_color.get(),\n                             rows_hidden_state = rows_hidden_state)\n        return table\n\n    @reactive.Effect\n    @reactive.event(input.show_info_button)\n    def open_info_modal():\n        modal = ui.modal(ui.HTML(info_html),\n                         title=\"Instructions and Methodoloy\",\n                        easy_close=True,\n                        )\n        ui.modal_show(modal)", "type": "text"}, {"name": "app_table_generation.py", "content": "# Python modules\nimport pandas as pd\nimport numpy as np\n\n# From local files\nfrom app_data_processing import data_processing, get_columns_from_categories\nimport app_data_processing\nfrom app_variables import diagnoses_categories_map_aggregates\n\nstyled_table_cached = None\n\n# Builds a dataframe with classes names to apply to each \"td\" table cell element\ndef get_table_cell_classes(df, aggregate_index_names):\n    classes = df.transform(lambda row: \n                           [\"summary-row\"]*len(row) \n                           if row.name in aggregate_index_names \n                           else [\"normal-row\"]*len(row), \n                           axis=1)\n    return pd.DataFrame(classes, index=df.index, columns=df.columns)\n\n# Created a styled table from raw data with default styling\ndef initialise_table(df):\n    oecd_df = df.copy()\n\n    # Process the data - keeping summary columns. \n    # No need for scaling\n    countries, numeric_data = data_processing(oecd_df, \n                                              scaling=False, \n                                              include_category_summary=True,\n                                              ) \n\n    # Re-shape the table and indexes\n    table = pd.concat([countries,numeric_data], axis=1)    \n    table = table.set_index('country')\n    table.index.name = None\n    table = table.T    \n\n    # List of names which are the summary/aggregate columns \n    aggregate_index_names = list(diagnoses_categories_map_aggregates.values())+\\\n        [\"Diseases of the ear and mastoid process_Per 100 000 population\", \n         \"Congenital malformations, deformations and chromosomal abnormalities_Per 100 000 population\"]\n\n    # General styling to the whole table\n    styles_table = [\n        {'selector': 'thead', 'props': 'border-bottom: 2px solid black; text-align: center'},\n        {'selector': 'td', 'props': 'width: 200px'},\n        {'selector': 'table', 'props': 'border-spacing: 5px;'},\n        {'selector': 'th', 'props': 'padding: 6px'},\n        {'selector': 'td', 'props': 'text-align: center'},\n    ]\n\n    # Row specific styling, adding hover styles\n    summary_row_styles = [{'selector': 'tr:hover td', 'props': 'background-color: #d9fff6 !important; cursor: pointer'},\n                    {'selector': 'tr:hover th', 'props': 'background-color: #d9fff6 !important; cursor: pointer;'},\n                    {'selector': 'tr td', 'props': 'background-color: #78f4ff;'},\n                    {'selector': 'td','props': 'border-bottom: 1px solid grey;'},\n                    {'selector': 'th','props': 'border-bottom: 1px solid grey; min_width: 150px; width: 250px'}]\n\n    other_row_styles = [{'selector': 'tr:hover td', 'props': 'background-color: #dbdbdb !important;'},\n                    {'selector': 'tr:hover th', 'props': 'background-color: #dbdbdb !important;'},\n                    ]\n\n    styles_rows = {\n        row_name : summary_row_styles\n            if row_name in aggregate_index_names else\n            other_row_styles            \n        for row_name in table.index\n    }\n\n    # Apply styling\n    styled = table.style\\\n        .format(precision=1, thousands=\",\", decimal=\".\")\\\n        .format_index(lambda index_name: index_name.replace(\"_\",\" \"))\\\n        .set_table_styles(styles_table)\\\n        .set_table_styles(styles_rows, axis=1, overwrite=False)\\\n        .apply_index(lambda names: np.where(names.isin(aggregate_index_names), \"background-color: #78f4ff;\", \"\"))\\\n        .set_sticky(axis = 1)\\\n        .set_td_classes(get_table_cell_classes(table, aggregate_index_names))\\\n        .set_table_attributes(\"class='interactive-table'\") # Allows JavaScript selection\n\n    return styled\n\ndef create_table(categories, countries_selected, country_to_color, rows_hidden_state):\n    global styled_table_cached \n    \n    data_df_cached = app_data_processing.data_df_cached\n\n    # If data not available or no countries/categories selected, don't do anything\n    if data_df_cached is None or len(categories)==0 or len(countries_selected)==0:\n        return\n\n    styled = styled_table_cached\n\n    # For the display table, only need to process the underlying data once\n    # Because the underlying numbers do not change only what to show (i.e. the style)\n    if styled is None:\n        styled = initialise_table(data_df_cached)\n        styled_table_cached = styled # update the cached table\n\n    # Update the styled table depending on country and category selections:\n    # Update header colors\n    styles_columns = {\n            country: [{'selector': '.col_heading',\n                       'props': f'background: linear-gradient(0deg,{country_to_color[country]} 0%, rgba(255,255,255,1) 30%)'}]\n            for country in countries_selected\n        }\n\n    # Hide columns and rows depending on selection\n    all_cols = list(styled.columns)\n    all_rows = list(styled.index)\n    cols_to_hide = [col for col in all_cols if col not in countries_selected]\n    rows_to_hide = [row \n                    for row in all_rows\n                    if row not in get_columns_from_categories(categories,include_category_summary=True)\n                   ]\n\n    # The state of which row is collapsed is saved in a hidden ui checkbox component. \n    # Sets display of the table cell (<td> or <th>) of the relevant row (<tr>)\n    # Note: \"display: none\" on tr fails\n    rows_to_collapse = {\n        all_rows[int(index)] : [{'selector': 'tr td', 'props': 'display: none'},\n                                {'selector': 'tr th', 'props': 'display: none'}]\n        for index in rows_hidden_state\n    }\n\n    # Apply/update styling in response to reactive inputs.\n    styled\\\n        .hide(cols_to_hide, axis = 1)\\\n        .hide(rows_to_hide, axis = 0)\\\n        .set_table_styles(styles_columns, overwrite=False)\\\n        .set_table_styles(rows_to_collapse, axis =1, overwrite=False)\\\n\n    return styled\n", "type": "text"}, {"name": "app_ui.py", "content": "# Python modules\nfrom shiny import ui\nfrom shinywidgets import output_widget\n\n# From local files\nfrom app_variables import diagnoses_categories_map\n\n# Split the list of categories in two for UI purposes\ncategories = list(diagnoses_categories_map.keys())\nsplit_point = len(categories) // 2\nleft_categories = categories[:split_point]\nright_categories = categories[split_point:]\n\n# App UI element\n# Styling is achieved through a mix of in-line CSS, bootstrap class names and external CSS\n# This is because not all shiny ui components allow setting style attributes and/or classes\napp_ui = ui.page_fluid(\n    # Container CSS style\n    {\n        \"style\": \"margin-top: 20px; margin-bottom: 20px; \\\n        padding-top: 20px; \\\n        padding-bottom: 20px; \\\n        border-radius: 30px; \\\n        background-color: white; \\\n        max-width: 1300px\"\n    },\n    \n    # CSS Style sheet - to style elements unable to be modified in shiny\n    ui.tags.head(\n        ui.tags.link({\"rel\": \"stylesheet\", \"type\": \"text/css\", \"href\": \"style.css\"}),\n        ui.HTML('<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\\\n                <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\\\n                <link href=\"https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap\" rel=\"stylesheet\">')\n    ),\n    \n    # Javascript\n    ui.tags.script({\"src\": \"table_interactivity.js\"}),\n    \n    # Checkbox selection group - show/hide on button press\n    ui.panel_conditional(\n        \"input.show_categories\", # Using the hidden switch input\n        ui.tags.h4(\n            \"Hospital Discharge Diagnosis Category Selection\", class_=\"text-center mt-2\"\n        ),\n        # Two columns of checkboxes\n        ui.div(\n            ui.input_checkbox_group(\n                \"diagnosis_categories_left\",\n                \" \",\n                choices=left_categories,\n                selected=left_categories,\n                width=\"50%\",\n            ),\n            ui.input_checkbox_group(\n                \"diagnosis_categories_right\",\n                \" \",\n                choices=right_categories,\n                selected=right_categories,\n                width=\"50%\",\n            ),\n            {\"style\": \"display: flex\"},\n        ),\n        # Diagnosis Selection buttons\n        ui.div(\n            ui.input_action_button(\n                \"select_all_button\", \n                \"Select All\", \n                width=\"200px\", \n                class_=\"btn-primary\"\n            ),\n            ui.input_action_button(\n                \"select_none_button\",\n                \"Remove Selections\",\n                width=\"200px\",\n                class_=\"btn-danger\",\n            ),\n            class_=\"d-flex w-100 justify-content-around align-items-center mb-3\",\n        ),\n        {\"style\": \"border-radius: 25px; background: lightgrey; padding: 20px\"},\n    ),\n    \n    # Plot options container\n    ui.div(\n        # Number of groups slider\n        ui.div(\n            ui.input_slider(\n                \"num_groups\", \"Number of Clusters\", min=1, max=7, value=3, step=1\n            ),\n            class_=\"d-flex justify-content-center text-center\",\n        ),\n        # Toggle category selector panel button\n        ui.div(\n            ui.panel_conditional(\n                \"!input.show_categories\",\n                ui.input_action_button(\n                    \"open_categories_button\",\n                    \"Categories\",\n                    icon=ui.img({\"src\": \"down-arrow.svg\", \"style\": \"width:20px\"}),\n                    class_=\"btn-outline-dark\",\n                ),\n            ),\n            ui.panel_conditional(\n                \"input.show_categories\",\n                ui.input_action_button(\n                    \"close_categories_button\",\n                    \"Categories\",\n                    icon=ui.img({\"src\": \"up-arrow.svg\", \"style\": \"width:20px\"}),\n                    class_=\"btn-outline-dark\",\n                ),\n            ),\n            class_=\"d-flex justify-content-center mb-1\",\n        ),\n        # Label toggle and clear country selection buttons\n        ui.div(\n            ui.input_action_button(\n                \"toggle_labels_button\",\n                \"Toggle Labels\",\n                class_=\"btn-primary \",\n                width=\"200px\",\n            ),\n            ui.input_action_button(\n                \"clear_country_selection_button\",\n                \"Clear Selected Countries\",\n                class_=\"btn-outline-secondary ms-1\",\n                width=\"200px\",\n            ),\n            class_=\"d-flex justify-content-center align-items-center mb-2\",\n        ),\n        class_=\"d-xs-column d-md-flex justify-content-md-around justify-content-center align-items-center w-100 mb-2\",\n    ),\n    \n    # Place title in html for responsive wrapping of text\n    ui.tags.h4(\n        \"Visualising the Clustering of Countries Based on Similarity of Hospital Discharge Diagnoses Using Unsupervised Machine Learning\",\n        class_=\"text-center mb-0\",\n    ),\n    \n    # Plot output\n    output_widget(\"plot_output\"),\n\n    ui.div(\n        \"To view more details about a country including numerical data - click on any of the points above to toggle selection.\",\n        {\"style\":\"border-radius: 10px; background-color: #bfbfbf; text-align: center; padding: 5px; margin: 10px 20px\"}\n    ),\n    \n    # Output table\n    ui.div(\n        ui.output_table(\"table_output\"),\n        class_=\"d-flex justify-content-center\"\n    ),\n\n    # Hidden Checkboxes - used to pass state of collapsed table rows from frontend to backend\n    ui.div(\n        ui.input_checkbox_group(\n            \"row_indexes_to_hide\",\n            \"This should be hidden\",\n            [str(x) for x in list(range(148))],  # 0-147 as string\n        ),\n        {\"style\": \"display: none\"},\n    ),\n\n    # Hidden switch to show categories - used to pass state between frontend and backend\n    ui.div(\n        ui.input_switch(\"show_categories\", \"This should be hidden\", value=False),\n        {\"style\": \"display: none\"},\n    ),\n\n    # Footer\n    ui.tags.footer(\n        ui.div(\n            ui.input_action_button(\n                \"show_info_button\",\n                ui.img({\"src\": \"info.svg\", \"style\": \"width:40px\"}),\n                width=\"40px\",\n            ),\n        class_=\"d-flex justify-content-center\"\n        ),\n        ui.div(\"Data Source: OECD Health Care Utilisation Dataset \",\n               ui.tags.a(\"(Link)\", \n                         href=\"https://stats.oecd.org/index.aspx?DataSetCode=HEALTH_proc\",\n                        target=\"_blank\"),\n              {\"style\":\"text-align:center; color: grey\"}),\n        {\"style\":\"border-top: 1px solid grey; margin-top: 20px\"}\n    )\n)\n", "type": "text"}, {"name": "app_variables.py", "content": "# Variables \ndata_url = \"https://raw.githubusercontent.com/drpawelo/python-advanced-HSC/main/week_05/starting_code/OCED_simplified.csv\"\n\n# Dictionary to map categories of diagnoses to columns\ndiagnoses_categories_map = {\n    \"Infectious and parasitic diseases\": [\n        \"Intestinal infectious diseases except diarrhoea_Per 100 000 population\",\n        \"Diarrhoea and gastroenteritis of presumed infectious origin_Per 100 000 population\",\n        \"Tuberculosis_Per 100 000 population\",\n        \"Septicaemia_Per 100 000 population\",\n        \"Human immunodeficiency virus (HIV) disease_Per 100 000 population\",\n        \"Other infectious and parasitic diseases_Per 100 000 population\",\n    ],\n    \"Neoplasms\": [\n        \"Malignant neoplasm of colon, rectum and anus_Per 100 000 population\",\n        \"Malignant neoplasm of trachea, bronchus and lung_Per 100 000 population\",\n        \"Malignant neoplasm of skin_Per 100 000 population\",\n        \"Malignant neoplasm of breast_Per 100 000 females\",\n        \"Malignant neoplasm of uterus_Per 100 000 females\",\n        \"Malignant neoplasm of ovary_Per 100 000 females\",\n        \"Malignant neoplasm of prostate_Per 100 000 males\",\n        \"Malignant neoplasm of bladder_Per 100 000 population\",\n        \"Other Malignant neoplasms_Per 100 000 population\",\n        \"Carcinoma in situ_Per 100 000 population\",\n        \"Benign neoplasm of colon, rectum and anus_Per 100 000 population\",\n        \"Leiomyoma of uterus_Per 100 000 females\",\n        \"Other Benign neoplasms and neoplasms of uncertain or unknown behaviour_Per 100 000 population\",\n    ],\n    \"Diseases of the blood and bloodforming organs\": [\n        \"Anaemias_Per 100 000 population\",\n        \"Other diseases of the blood and bloodforming organs_Per 100 000 population\",\n    ],\n    \"Endocrine, nutritional and metabolic diseases\": [\n        \"Diabetes mellitus_Per 100 000 population\",\n        \"Other endocrine, nutritional and metabolic diseases_Per 100 000 population\",\n    ],\n    \"Mental and behavioural disorders\": [\n        \"Dementia_Per 100 000 population\",\n        \"Mental and behavioural disorders due to alcohol_Per 100 000 population\",\n        \"Mental and behavioural disorders due to use of Other psychoactive substance_Per 100 000 population\",\n        \"Schizophrenia, schizotypal and delusional disorders_Per 100 000 population\",\n        \"Mood (affective) disorders_Per 100 000 population\",\n        \"Other Mental and behavioural disorders_Per 100 000 population\",\n    ],\n    \"Diseases of the nervous system\": [\n        \"Alzheimer's disease_Per 100 000 population\",\n        \"Multiple sclerosis_Per 100 000 population\",\n        \"Epilepsy_Per 100 000 population\",\n        \"Transient cerebral ischaemic attacks and related syndromes_Per 100 000 population\",\n        \"Other diseases of the nervous system_Per 100 000 population\",\n    ],\n    \"Diseases of the eye and adnexa\": [\n        \"Cataract_Per 100 000 population\",\n        \"Other diseases of the eye and adnexa_Per 100 000 population\",\n    ],\n    \"Diseases of the ear and mastoid process\": [\n        \"Diseases of the ear and mastoid process_Per 100 000 population\"\n    ],\n    \"Diseases of the circulatory system\": [\n        \"Hypertensive diseases_Per 100 000 population\",\n        \"Angina pectoris_Per 100 000 population\",\n        \"Acute myocardial infarction_Per 100 000 population\",\n        \"Other ischaemic heart disease_Per 100 000 population\",\n        \"Pulmonary heart disease and diseases of Pulmonary circulation_Per 100 000 population\",\n        \"Conduction disorders and cardiac arrhythmias_Per 100 000 population\",\n        \"Heart failure_Per 100 000 population\",\n        \"Cerebrovascular diseases_Per 100 000 population\",\n        \"Atherosclerosis_Per 100 000 population\",\n        \"Varicose veins of lower extremities_Per 100 000 population\",\n        \"Other diseases of the circulatory system_Per 100 000 population\",\n    ],\n    \"Diseases of the respiratory system\": [\n        \"Acute upper respiratory infections and influenza_Per 100 000 population\",\n        \"Pneumonia_Per 100 000 population\",\n        \"Other acute lower respiratory infections_Per 100 000 population\",\n        \"Chronic diseases of tonsils and adenoids_Per 100 000 population\",\n        \"Other diseases of upper respiratory tract_Per 100 000 population\",\n        \"Chronic obstructive Pulmonary disease and bronchiectasis_Per 100 000 population\",\n        \"Asthma_Per 100 000 population\",\n        \"Other diseases of the respiratory system_Per 100 000 population\",\n    ],\n    \"Diseases of the digestive system\": [\n        \"Disorders of teeth and supporting structures_Per 100 000 population\",\n        \"Other diseases of oral cavity, salivary glands and jaws_Per 100 000 population\",\n        \"Diseases of oesophagus_Per 100 000 population\",\n        \"Peptic ulcer_Per 100 000 population\",\n        \"Dyspepsia and Other diseases of stomach and duodenum_Per 100 000 population\",\n        \"Diseases of appendix_Per 100 000 population\",\n        \"Inguinal hernia_Per 100 000 population\",\n        \"Other abdominal hernia_Per 100 000 population\",\n        \"Crohn's disease and ulcerative colitis_Per 100 000 population\",\n        \"Other noninfective gastroenteritis and colitis_Per 100 000 population\",\n        \"Paralytic ileus and Intestinal obstruction without hernia_Per 100 000 population\",\n        \"Diverticular disease of intestine_Per 100 000 population\",\n        \"Diseases of anus and rectum_Per 100 000 population\",\n        \"Other diseases of intestine_Per 100 000 population\",\n        \"Alcoholic liver disease_Per 100 000 population\",\n        \"Other diseases of liver_Per 100 000 population\",\n        \"Cholelithiasis_Per 100 000 population\",\n        \"Other diseases of gall bladder and biliary tract_Per 100 000 population\",\n        \"Diseases of pancreas_Per 100 000 population\",\n        \"Other diseases of the digestive system_Per 100 000 population\",\n    ],\n    \"Diseases of the skin and subcutaneous tissue\": [\n        \"Infections of the skin and subcutaneous tissue_Per 100 000 population\",\n        \"Dermatitis, eczema and papulosquamous disorders_Per 100 000 population\",\n        \"Other diseases of the skin and subcutaneous tissue_Per 100 000 population\",\n    ],\n    \"Diseases of musculoskeletal system and connective tissue\": [\n        \"Coxarthrosis (arthrosis of hip)_Per 100 000 population\",\n        \"Gonarthrosis (arthrosis of knee)_Per 100 000 population\",\n        \"Internal derangement of knee_Per 100 000 population\",\n        \"Other arthropathies_Per 100 000 population\",\n        \"Systemic connective tissue disorders_Per 100 000 population\",\n        \"Deforming dorsopathies and spondylopathies_Per 100 000 population\",\n        \"Intervertebral disc disorders_Per 100 000 population\",\n        \"Dorsalgia_Per 100 000 population\",\n        \"Soft tissue disorders_Per 100 000 population\",\n        \"Other disorders of the musculoskeletal system and connective tissue_Per 100 000 population\",\n    ],\n    \"Diseases of the genitourinary system\": [\n        \"Glomerular and renal tubulo-interstitial diseases_Per 100 000 population\",\n        \"Renal failure_Per 100 000 population\",\n        \"Urolithiasis_Per 100 000 population\",\n        \"Other diseases of the urinary system_Per 100 000 population\",\n        \"Hyperplasia of prostate_Per 100 000 males\",\n        \"Other diseases of Male genital organs_Per 100 000 males\",\n        \"Disorders of breast_Per 100 000 females\",\n        \"Inflammatory diseases of Female pelvic organs_Per 100 000 females\",\n        \"Menstrual, menopausal and Other Female genital conditions_Per 100 000 females\",\n        \"Other disorders of the genitourinary system_Per 100 000 females\",\n    ],\n    \"Pregnancy, childbirth and the puerperium\": [\n        \"Medical abortion_Per 100 000 females\",\n        \"Other pregnancy with abortive outcome_Per 100 000 females\",\n        \"Complications of pregnancy in the antenatal period_Per 100 000 females\",\n        \"Complications of pregnancy predominantly during labour and delivery_Per 100 000 females\",\n        \"Single spontaneous delivery_Per 100 000 females\",\n        \"Other delivery_Per 100 000 females\",\n        \"Complications predominantly related to the puerperium_Per 100 000 females\",\n        \"Other obstetric conditions_Per 100 000 females\",\n    ],\n    \"Certain conditions originating in the perinatal period\": [\n        \"Disorders related to short gestation and low birthweight_Per 100 000 population\",\n        \"Other conditions originating in the perinatal period_Per 100 000 population\",\n    ],\n    \"Congenital malformations, deformations and chromosomal abnormalities\": [\n        \"Congenital malformations, deformations and chromosomal abnormalities_Per 100 000 population\"\n    ],\n    \"Symptoms, signs and abnormal clinical and laboratory findings, n.e.c.\": [\n        \"Pain in throat and chest_Per 100 000 population\",\n        \"Abdominal and pelvic Pain_Per 100 000 population\",\n        \"Unknown and unspecified causes of morbidity_Per 100 000 population\",\n        \"Other symptoms, signs and abnormal clinical and laboratory findings_Per 100 000 population\",\n    ],\n    \"Injury, poisoning and other consequences of external causes\": [\n        \"Intracranial injury_Per 100 000 population\",\n        \"Other injuries to the head_Per 100 000 population\",\n        \"Fracture of forearm_Per 100 000 population\",\n        \"Fracture of femur_Per 100 000 population\",\n        \"Fracture of lower leg, including ankle_Per 100 000 population\",\n        \"Other injuries_Per 100 000 population\",\n        \"Burns and corrosions_Per 100 000 population\",\n        \"Poisonings by drugs, medicaments, and biological substances and toxic effects_Per 100 000 population\",\n        \"Complications of Surgical and medical care, n.e.c._Per 100 000 population\",\n        \"Sequelae of injuries, of poisoning and of Other external causes_Per 100 000 population\",\n        \"Other and unspecified effects of external causes_Per 100 000 population\",\n    ],\n    \"Factors influencing health status and contact with health services\": [\n        \"Medical observation and evaluation for suspected diseases and conditions_Per 100 000 population\",\n        \"Contraceptive management_Per 100 000 population\",\n        \"Liveborn infants according to place of birth_Per 100 000 population\",\n        \"Other medical care (including radiotherapy and chemotherapy sessions)_Per 100 000 population\",\n        \"Other factors influencing Health status and contact with Health services_Per 100 000 population\",\n    ],\n}\n\ndiagnoses_categories_map_aggregates = {\n    \"Infectious and parasitic diseases\": \"Infectious and parasitic diseases_Per 100 000 population\",\n    \"Neoplasms\": \"Neoplasms_Per 100 000 population\",\n    \"Diseases of the blood and bloodforming organs\": \"Diseases of the blood and bloodforming organs_Per 100 000 population\",\n    \"Endocrine, nutritional and metabolic diseases\": \"Endocrine, nutritional and metabolic diseases_Per 100 000 population\",\n    \"Mental and behavioural disorders\": \"Mental and behavioural disorders_Per 100 000 population\",\n    \"Diseases of the nervous system\": \"Diseases of the nervous system_Per 100 000 population\",\n    \"Diseases of the eye and adnexa\": \"Diseases of the eye and adnexa_Per 100 000 population\",\n    # \"Diseases of the ear and mastoid process\":  'Diseases of the ear and mastoid process_Per 100 000 population', # Duplicate\n    \"Diseases of the circulatory system\": \"Diseases of the circulatory system_Per 100 000 population\",\n    \"Diseases of the respiratory system\": \"Diseases of the respiratory system_Per 100 000 population\",\n    \"Diseases of the digestive system\": \"Diseases of the digestive system_Per 100 000 population\",\n    \"Diseases of the skin and subcutaneous tissue\": \"Diseases of the skin and subcutaneous tissue_Per 100 000 population\",\n    \"Diseases of musculoskeletal system and connective tissue\": \"Diseases of musculoskeletal system and connective tissue_Per 100 000 population\",\n    \"Diseases of the genitourinary system\": \"Diseases of the genitourinary system_Per 100 000 population\",\n    \"Pregnancy, childbirth and the puerperium\": \"Pregnancy, childbirth and the puerperium_Per 100 000 females\",\n    \"Certain conditions originating in the perinatal period\": \"Certain conditions originating in the perinatal period_Per 100 000 population\",\n    # \"Congenital malformations, deformations and chromosomal abnormalities\": 'Congenital malformations, deformations and chromosomal abnormalities_Per 100 000 population', # Duplicate\n    \"Symptoms, signs and abnormal clinical and laboratory findings, n.e.c.\": \"Symptoms, signs and abnormal clinical and laboratory findings, n.e.c._Per 100 000 population\",\n    \"Injury, poisoning and other consequences of external causes\": \"Injury, poisoning and other consequences of external causes_Per 100 000 population\",\n    \"Factors influencing health status and contact with health services\": \"Factors influencing health status and contact with health services_Per 100 000 population\",\n}\n", "type": "text"}, {"name": "requirements.txt", "content": "# Packages listed in this file will be installed by micropip just before the app\n# is started. This means that each time someone visits the app, the packages\n# will be downloaded and installed into the browser's Pyodide environment.\n#\n# Each line must contain either a requirements specification or the URL for a\n# wheel file.\nbqplot\nhttps://files.pythonhosted.org/packages/f5/17/dedbb86ee03e112d2d2de9111d60de8aea0bbc19503aba8c54faf97b9266/bqplot-0.12.39-py2.py3-none-any.whl\n", "type": "text"}, {"name": "www\\down-arrow.svg", "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Uploaded to: SVG Repo, www.svgrepo.com, Generator: SVG Repo Mixer Tools -->\n<svg width=\"800px\" height=\"800px\" viewBox=\"0 0 1024 1024\" class=\"icon\"  version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M903.232 256l56.768 50.432L512 768 64 306.432 120.768 256 512 659.072z\" fill=\"#000000\" /></svg>", "type": "text"}, {"name": "www\\info.svg", "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!-- Uploaded to: SVG Repo, www.svgrepo.com, Generator: SVG Repo Mixer Tools -->\n<svg width=\"800px\" height=\"800px\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<g id=\"Warning / Info\">\n<path id=\"Vector\" d=\"M12 11V16M12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12C21 16.9706 16.9706 21 12 21ZM12.0498 8V8.1L11.9502 8.1002V8H12.0498Z\" stroke=\"#000000\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n</g>\n</svg>", "type": "text"}, {"name": "www\\style.css", "content": "body {\n    background-color: lightblue;\n    font-family: 'Montserrat', sans-serif;\n}\n\n#toggle_labels_button{\n    font-size: 0.8rem;\n}\n\n#clear_country_selection_button{\n    font-size: 0.8rem;\n}\n\n#show_info_button{\n    background: none;\n    border: none;\n    filter: invert(89%) sepia(0%) saturate(1%) hue-rotate(167deg) brightness(89%) contrast(85%);\n}\n\n#show_info_button:hover{\n    filter: invert(74%) sepia(31%) saturate(3743%) hue-rotate(190deg) brightness(105%) contrast(108%);\n}\n\n/* Scatterplot points hover - To feedback to user that they are clickable */\n.dot:hover {\n    cursor: pointer;\n}", "type": "text"}, {"name": "www\\table_interactivity.js", "content": "// Script adds interactivity to the created <table> element that displays the Pandas dataframe.\n// Difficulty is that HTML elements are repeated created/removed/modified due to shiny reactivity. \n// Therefore cannot statically execute javascript, need to dynamically execute code so that functionality remains when table is recreated. \n// Uses MutationObserver to achieve this. https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\n\n// The function below was taken from Yong Wang (https://stackoverflow.com/questions/5525071/how-to-wait-until-an-element-exists)\n// Waits for a selected element to load and resolves Promise by returning the element\nfunction wait_for_element(selector) {\n    return new Promise(resolve => {\n        if (document.querySelector(selector)) {\n            return resolve(document.querySelector(selector));\n        }\n\n        const observer = new MutationObserver(mutations => {\n            if (document.querySelector(selector)) {\n                resolve(document.querySelector(selector));\n                observer.disconnect();\n            }\n        });\n\n        observer.observe(document.body, {\n            childList: true,\n            subtree: true\n        });\n    });\n};\n\n// Toggles the hidden checkbox to talk enable persistent state of which rows are collapsed between table renders\nfunction toggle_hidden_checkbox(row){\n    \n    // Gets list of classes in the row - should contain a class like \"row123\" where 123 is the row number (0-indexed)\n    const row_classlist = Array.from(row.firstElementChild.classList);\n    // Regex match \"row\" + any digit\n    const row_class = row_classlist.find(class_name => class_name.match(/row\\d/gm)) ;\n    // Only keep the number portion to get the row index\n    const row_index = row_class.slice(3) ;\n\n    // Get the input checkbox element with value corresponding to the row index\n    const checkbox = document.querySelector(`input[name='row_indexes_to_hide'][value='${row_index}']`)\n    \n    if (checkbox.checked === true || checkbox.checked === \"checked\") {\n        checkbox.checked = false;\n    } else {\n        checkbox.checked = true;\n    };\n\n    // Dispatch event so that backend can pick it up and update its state\n    const event = new CustomEvent('change', {bubbles: true});\n    checkbox.dispatchEvent(event);\n};\n\n// Togles all show/hide of all rows under a clickable summary row \nfunction toggle_show_hide_rows(row) {\n    // Get the next table row <tr> element\n    let next_row = row.nextElementSibling;\n\n    // Stops running when next row is another summary row or no more rows\n    while (next_row && next_row.querySelector(\"td.normal-row\")) {\n        // Get child cells (<td> and <th>) of the row\n        const child_cells = Array.from(next_row.children)\n\n        // Toggles collapse by setting display of table cell elements (<td> and <th>) to none or table-cell\n        child_cells.forEach(child=>{\n            // Gets the computed display (pandas generated styles do not appear in HTML \"style\" attribute)\n            computed_display = window.getComputedStyle(child, null).display;\n            if (computed_display === \"none\") {\n                child.style.display = \"table-cell\";\n            } else {\n                child.style.display = \"none\";\n            };\n        })\n\n        // Update a checkbox group to update state and allow backend to read it\n        toggle_hidden_checkbox(next_row)\n\n        // Iterate\n        next_row = next_row.nextElementSibling;\n    };\n};\n\n// Adds onclick function to each summary row\nfunction make_table_clickable(table) {\n    // Use \"has\" CSS pseudo-class to select the table row (tr) that contains a cell (td) with class \"summary-row\"\n    // Table cells (td) were classed during table styling in app_data_processing.py\n    const summary_rows = table.querySelectorAll(\"tr:has(td.summary-row)\"); // List of <tr> elements to be made clickable\n\n    // Add onclick for each row\n    summary_rows.forEach((row)=>{\n        row.onclick = ()=>{toggle_show_hide_rows(row)}\n    });\n    \n};\n\n// Observes the table div for reactive changes. If table exists, make its summary rows clickable\nasync function observe_table() {    \n    // Retrieve the <div> corresponding to the shiny ui element: ui.output_table(\"table_output\"). \n    // This is not available on page start - so need to listen for it using wait_for_element\n    const target_node = await wait_for_element(\"#table_output\"); \n\n    // Callback function to execute when mutations are observed\n    const callback = (mutationList, observer) => {\n      for (const mutation of mutationList) {\n        if (mutation.type === \"childList\") {\n            table_element = target_node.querySelector('.interactive-table'); // \"interactive-table\" class was added during table styling in app_data_processing.py\n            \n            if (table_element) {\n                make_table_clickable(table_element);\n            }\n        }\n      }\n    };\n    \n    // Create an observer instance linked to the callback function\n    const observer = new MutationObserver(callback);\n    \n    // Indefinitely observe the target node for mutations - in this case changes to child nodes (i.e. the <table> HTML elemnt)\n    observer.observe(target_node, { childList: true });\n};\n\nobserve_table();\n", "type": "text"}, {"name": "www\\up-arrow.svg", "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Uploaded to: SVG Repo, www.svgrepo.com, Generator: SVG Repo Mixer Tools -->\n<svg width=\"800px\" height=\"800px\" viewBox=\"0 0 1024 1024\" class=\"icon\"  version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M903.232 768l56.768-50.432L512 256l-448 461.568 56.768 50.432L512 364.928z\" fill=\"#000000\" /></svg>", "type": "text"}]